// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int          @id @default(autoincrement())
  name                String?
  email               String       @unique
  phone               String?
  passwordHash        String?
  profilePhoto        String?
  isVerified          Boolean      @default(false)
  role                Role
  authProvider        AuthProvider @default(EMAIL)
  verificationToken   String?
  verificationExpires DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relations
  tenant   Tenant?
  bookings Booking[]
  reviews  Review[]
  wishlist Wishlist[]
}

model Tenant {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  companyName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id])
  properties Property[]
}

model PropertyCategory {
  id         Int        @id @default(autoincrement())
  name       String
  isDeleted  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]
}

model Province {
  id     Int    @id @default(autoincrement())
  name   String @unique
  cities City[]
}

model City {
  id         Int        @id @default(autoincrement())
  name       String
  provinceId Int
  province   Province   @relation(fields: [provinceId], references: [id])
  properties Property[]
}

model Property {
  id          Int       @id @default(autoincrement())
  tenantId    Int
  categoryId  Int
  name        String
  description String?
  cityId      Int
  address     String
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  tenant         Tenant           @relation(fields: [tenantId], references: [id])
  category       PropertyCategory @relation(fields: [categoryId], references: [id])
  city           City             @relation(fields: [cityId], references: [id])
  rooms          Room[]
  bookings       Booking[]
  PropertyImages PropertyImage[]
  reviews        Review[]
  wishlist       Wishlist[]
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
}

model Room {
  id          Int       @id @default(autoincrement())
  propertyId  Int
  name        String
  description String?
  image       String
  qty         Int
  basePrice   Float
  capacity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  property       Property           @relation(fields: [propertyId], references: [id])
  availabilities RoomAvailability[]
  peakRates      PeakSeasonRate[]
  bookings       Booking[]
}

model RoomAvailability {
  id        Int      @id @default(autoincrement())
  roomId    Int
  date      DateTime
  available Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id])

  @@unique([roomId, date])
}

model PeakSeasonRate {
  id                 Int               @id @default(autoincrement())
  roomId             Int
  startDate          DateTime
  endDate            DateTime
  priceModifierType  PriceModifierType
  priceModifierValue Float
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  room Room @relation(fields: [roomId], references: [id])
}

model Booking {
  id             Int           @id @default(autoincrement())
  userId         Int
  propertyId     Int
  roomId         Int
  orderNumber    String        @unique
  checkinDate    DateTime
  checkoutDate   DateTime
  totalPrice     Float
  status         BookingStatus
  bookingType    BookingType
  paymentProof   String?
  autoCanceledAt DateTime?
  confirmedAt    DateTime?
  rejectedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  expiredAt      DateTime?
  deleteAt       DateTime?

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
  room     Room     @relation(fields: [roomId], references: [id])
  review   Review?

  @@index([status])
  @@index([createdAt])
}

model DailyOrderCounter {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  counter   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          Int      @id @default(autoincrement())
  bookingId   Int      @unique
  userId      Int
  propertyId  Int
  rating      Int?
  comment     String
  tenantReply String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  booking  Booking  @relation(fields: [bookingId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  userId     Int
  propertyId Int
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId]) // Agar satu user tidak menyimpan properti yang sama lebih dari sekali
}

enum Role {
  USER
  TENANT
}

enum AuthProvider {
  EMAIL
  GOOGLE
}

enum BookingStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  CANCELED
  CONFIRMED
  DONE
  REJECTED
  EXPIRED
}

enum BookingType {
  MANUAL
  GATEWAY
}

enum PriceModifierType {
  PERCENTAGE
  NOMINAL
}
